// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	common "github.com/sunsingerus/tbox/pkg/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReportsPlaneClient is the client API for ReportsPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportsPlaneClient interface {
	// Get report about multiple objects as a one item.
	ObjectsReport(ctx context.Context, in *common.ObjectsRequest, opts ...grpc.CallOption) (*common.ObjectsList, error)
}

type reportsPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewReportsPlaneClient(cc grpc.ClientConnInterface) ReportsPlaneClient {
	return &reportsPlaneClient{cc}
}

func (c *reportsPlaneClient) ObjectsReport(ctx context.Context, in *common.ObjectsRequest, opts ...grpc.CallOption) (*common.ObjectsList, error) {
	out := new(common.ObjectsList)
	err := c.cc.Invoke(ctx, "/api.service.ReportsPlane/ObjectsReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportsPlaneServer is the server API for ReportsPlane service.
// All implementations must embed UnimplementedReportsPlaneServer
// for forward compatibility
type ReportsPlaneServer interface {
	// Get report about multiple objects as a one item.
	ObjectsReport(context.Context, *common.ObjectsRequest) (*common.ObjectsList, error)
	mustEmbedUnimplementedReportsPlaneServer()
}

// UnimplementedReportsPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedReportsPlaneServer struct {
}

func (UnimplementedReportsPlaneServer) ObjectsReport(context.Context, *common.ObjectsRequest) (*common.ObjectsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectsReport not implemented")
}
func (UnimplementedReportsPlaneServer) mustEmbedUnimplementedReportsPlaneServer() {}

// UnsafeReportsPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportsPlaneServer will
// result in compilation errors.
type UnsafeReportsPlaneServer interface {
	mustEmbedUnimplementedReportsPlaneServer()
}

func RegisterReportsPlaneServer(s grpc.ServiceRegistrar, srv ReportsPlaneServer) {
	s.RegisterService(&ReportsPlane_ServiceDesc, srv)
}

func _ReportsPlane_ObjectsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportsPlaneServer).ObjectsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.service.ReportsPlane/ObjectsReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportsPlaneServer).ObjectsReport(ctx, req.(*common.ObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportsPlane_ServiceDesc is the grpc.ServiceDesc for ReportsPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportsPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.ReportsPlane",
	HandlerType: (*ReportsPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObjectsReport",
			Handler:    _ReportsPlane_ObjectsReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/service/base_reports_plane.proto",
}
