// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	common "github.com/sunsingerus/tbox/pkg/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataPlaneClient is the client API for DataPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPlaneClient interface {
	// Bi-directional Data stream.
	// Some commands may be followed by data load. Be it logs, dumps, etc.
	DataChunks(ctx context.Context, opts ...grpc.CallOption) (DataPlane_DataChunksClient, error)
	// Uni-directional Data stream. One object is uploaded from the client to the server.
	// Returns status of the uploaded object.
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (DataPlane_UploadObjectClient, error)
	// Uni-directional Data stream. Multiple objects are uploaded from the client to the server.
	// Returns list of statuses of the uploaded objects.
	UploadObjects(ctx context.Context, opts ...grpc.CallOption) (DataPlane_UploadObjectsClient, error)
	// Uni-directional Data stream. One object is uploaded from the client to the server.
	// Returns status of the uploaded object.
	DownloadObject(ctx context.Context, in *common.ObjectRequest, opts ...grpc.CallOption) (DataPlane_DownloadObjectClient, error)
}

type dataPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPlaneClient(cc grpc.ClientConnInterface) DataPlaneClient {
	return &dataPlaneClient{cc}
}

func (c *dataPlaneClient) DataChunks(ctx context.Context, opts ...grpc.CallOption) (DataPlane_DataChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataPlane_ServiceDesc.Streams[0], "/api.service.DataPlane/DataChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPlaneDataChunksClient{stream}
	return x, nil
}

type DataPlane_DataChunksClient interface {
	Send(*common.DataPacket) error
	Recv() (*common.DataPacket, error)
	grpc.ClientStream
}

type dataPlaneDataChunksClient struct {
	grpc.ClientStream
}

func (x *dataPlaneDataChunksClient) Send(m *common.DataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataPlaneDataChunksClient) Recv() (*common.DataPacket, error) {
	m := new(common.DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataPlaneClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (DataPlane_UploadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataPlane_ServiceDesc.Streams[1], "/api.service.DataPlane/UploadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPlaneUploadObjectClient{stream}
	return x, nil
}

type DataPlane_UploadObjectClient interface {
	Send(*common.DataPacket) error
	CloseAndRecv() (*common.ObjectStatus, error)
	grpc.ClientStream
}

type dataPlaneUploadObjectClient struct {
	grpc.ClientStream
}

func (x *dataPlaneUploadObjectClient) Send(m *common.DataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataPlaneUploadObjectClient) CloseAndRecv() (*common.ObjectStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.ObjectStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataPlaneClient) UploadObjects(ctx context.Context, opts ...grpc.CallOption) (DataPlane_UploadObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataPlane_ServiceDesc.Streams[2], "/api.service.DataPlane/UploadObjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPlaneUploadObjectsClient{stream}
	return x, nil
}

type DataPlane_UploadObjectsClient interface {
	Send(*common.DataPacket) error
	CloseAndRecv() (*common.ObjectsList, error)
	grpc.ClientStream
}

type dataPlaneUploadObjectsClient struct {
	grpc.ClientStream
}

func (x *dataPlaneUploadObjectsClient) Send(m *common.DataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataPlaneUploadObjectsClient) CloseAndRecv() (*common.ObjectsList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(common.ObjectsList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataPlaneClient) DownloadObject(ctx context.Context, in *common.ObjectRequest, opts ...grpc.CallOption) (DataPlane_DownloadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataPlane_ServiceDesc.Streams[3], "/api.service.DataPlane/DownloadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataPlaneDownloadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataPlane_DownloadObjectClient interface {
	Recv() (*common.DataPacket, error)
	grpc.ClientStream
}

type dataPlaneDownloadObjectClient struct {
	grpc.ClientStream
}

func (x *dataPlaneDownloadObjectClient) Recv() (*common.DataPacket, error) {
	m := new(common.DataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataPlaneServer is the server API for DataPlane service.
// All implementations must embed UnimplementedDataPlaneServer
// for forward compatibility
type DataPlaneServer interface {
	// Bi-directional Data stream.
	// Some commands may be followed by data load. Be it logs, dumps, etc.
	DataChunks(DataPlane_DataChunksServer) error
	// Uni-directional Data stream. One object is uploaded from the client to the server.
	// Returns status of the uploaded object.
	UploadObject(DataPlane_UploadObjectServer) error
	// Uni-directional Data stream. Multiple objects are uploaded from the client to the server.
	// Returns list of statuses of the uploaded objects.
	UploadObjects(DataPlane_UploadObjectsServer) error
	// Uni-directional Data stream. One object is uploaded from the client to the server.
	// Returns status of the uploaded object.
	DownloadObject(*common.ObjectRequest, DataPlane_DownloadObjectServer) error
	mustEmbedUnimplementedDataPlaneServer()
}

// UnimplementedDataPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedDataPlaneServer struct {
}

func (UnimplementedDataPlaneServer) DataChunks(DataPlane_DataChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method DataChunks not implemented")
}
func (UnimplementedDataPlaneServer) UploadObject(DataPlane_UploadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedDataPlaneServer) UploadObjects(DataPlane_UploadObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObjects not implemented")
}
func (UnimplementedDataPlaneServer) DownloadObject(*common.ObjectRequest, DataPlane_DownloadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedDataPlaneServer) mustEmbedUnimplementedDataPlaneServer() {}

// UnsafeDataPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPlaneServer will
// result in compilation errors.
type UnsafeDataPlaneServer interface {
	mustEmbedUnimplementedDataPlaneServer()
}

func RegisterDataPlaneServer(s grpc.ServiceRegistrar, srv DataPlaneServer) {
	s.RegisterService(&DataPlane_ServiceDesc, srv)
}

func _DataPlane_DataChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataPlaneServer).DataChunks(&dataPlaneDataChunksServer{stream})
}

type DataPlane_DataChunksServer interface {
	Send(*common.DataPacket) error
	Recv() (*common.DataPacket, error)
	grpc.ServerStream
}

type dataPlaneDataChunksServer struct {
	grpc.ServerStream
}

func (x *dataPlaneDataChunksServer) Send(m *common.DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataPlaneDataChunksServer) Recv() (*common.DataPacket, error) {
	m := new(common.DataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataPlane_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataPlaneServer).UploadObject(&dataPlaneUploadObjectServer{stream})
}

type DataPlane_UploadObjectServer interface {
	SendAndClose(*common.ObjectStatus) error
	Recv() (*common.DataPacket, error)
	grpc.ServerStream
}

type dataPlaneUploadObjectServer struct {
	grpc.ServerStream
}

func (x *dataPlaneUploadObjectServer) SendAndClose(m *common.ObjectStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataPlaneUploadObjectServer) Recv() (*common.DataPacket, error) {
	m := new(common.DataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataPlane_UploadObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataPlaneServer).UploadObjects(&dataPlaneUploadObjectsServer{stream})
}

type DataPlane_UploadObjectsServer interface {
	SendAndClose(*common.ObjectsList) error
	Recv() (*common.DataPacket, error)
	grpc.ServerStream
}

type dataPlaneUploadObjectsServer struct {
	grpc.ServerStream
}

func (x *dataPlaneUploadObjectsServer) SendAndClose(m *common.ObjectsList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataPlaneUploadObjectsServer) Recv() (*common.DataPacket, error) {
	m := new(common.DataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataPlane_DownloadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.ObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataPlaneServer).DownloadObject(m, &dataPlaneDownloadObjectServer{stream})
}

type DataPlane_DownloadObjectServer interface {
	Send(*common.DataPacket) error
	grpc.ServerStream
}

type dataPlaneDownloadObjectServer struct {
	grpc.ServerStream
}

func (x *dataPlaneDownloadObjectServer) Send(m *common.DataPacket) error {
	return x.ServerStream.SendMsg(m)
}

// DataPlane_ServiceDesc is the grpc.ServiceDesc for DataPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.service.DataPlane",
	HandlerType: (*DataPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataChunks",
			Handler:       _DataPlane_DataChunks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadObject",
			Handler:       _DataPlane_UploadObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadObjects",
			Handler:       _DataPlane_UploadObjects_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadObject",
			Handler:       _DataPlane_DownloadObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/service/base_data_plane.proto",
}
