// Copyright The TBox Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// Address is an abstraction over domain-specific addresses.
// Represents all types of addresses in the system.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/common/address.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Address describes general address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ExplicitDomain specifies explicitly domain, where address is specified
	ExplicitDomain *Domain `protobuf:"bytes,10,opt,name=explicit_domain,json=explicitDomain,proto3,oneof" json:"explicit_domain,omitempty"`
	// Types that are assignable to Address:
	//	*Address_S3
	//	*Address_Kafka
	//	*Address_Digest
	//	*Address_Uuid
	//	*Address_UserId
	//	*Address_Dirname
	//	*Address_Filename
	//	*Address_Url
	//	*Address_Domain
	//	*Address_MachineId
	//	*Address_Email
	//	*Address_Custom
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_address_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_address_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_api_common_address_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetExplicitDomain() *Domain {
	if x != nil {
		return x.ExplicitDomain
	}
	return nil
}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (x *Address) GetS3() *S3Address {
	if x, ok := x.GetAddress().(*Address_S3); ok {
		return x.S3
	}
	return nil
}

func (x *Address) GetKafka() *KafkaAddress {
	if x, ok := x.GetAddress().(*Address_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Address) GetDigest() *Digest {
	if x, ok := x.GetAddress().(*Address_Digest); ok {
		return x.Digest
	}
	return nil
}

func (x *Address) GetUuid() *UUID {
	if x, ok := x.GetAddress().(*Address_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *Address) GetUserId() *UserID {
	if x, ok := x.GetAddress().(*Address_UserId); ok {
		return x.UserId
	}
	return nil
}

func (x *Address) GetDirname() *Dirname {
	if x, ok := x.GetAddress().(*Address_Dirname); ok {
		return x.Dirname
	}
	return nil
}

func (x *Address) GetFilename() *Filename {
	if x, ok := x.GetAddress().(*Address_Filename); ok {
		return x.Filename
	}
	return nil
}

func (x *Address) GetUrl() *URL {
	if x, ok := x.GetAddress().(*Address_Url); ok {
		return x.Url
	}
	return nil
}

func (x *Address) GetDomain() *Domain {
	if x, ok := x.GetAddress().(*Address_Domain); ok {
		return x.Domain
	}
	return nil
}

func (x *Address) GetMachineId() *MachineID {
	if x, ok := x.GetAddress().(*Address_MachineId); ok {
		return x.MachineId
	}
	return nil
}

func (x *Address) GetEmail() *Email {
	if x, ok := x.GetAddress().(*Address_Email); ok {
		return x.Email
	}
	return nil
}

func (x *Address) GetCustom() string {
	if x, ok := x.GetAddress().(*Address_Custom); ok {
		return x.Custom
	}
	return ""
}

type isAddress_Address interface {
	isAddress_Address()
}

type Address_S3 struct {
	// S3 address
	S3 *S3Address `protobuf:"bytes,100,opt,name=s3,proto3,oneof"`
}

type Address_Kafka struct {
	// Kafka address
	Kafka *KafkaAddress `protobuf:"bytes,200,opt,name=kafka,proto3,oneof"`
}

type Address_Digest struct {
	// Digest - based address
	Digest *Digest `protobuf:"bytes,300,opt,name=digest,proto3,oneof"`
}

type Address_Uuid struct {
	// UUID - based address
	Uuid *UUID `protobuf:"bytes,400,opt,name=uuid,proto3,oneof"`
}

type Address_UserId struct {
	// UserID - based address. Used to specify any related user (owner, sender, etc)
	UserId *UserID `protobuf:"bytes,500,opt,name=user_id,json=userId,proto3,oneof"`
}

type Address_Dirname struct {
	// Dirname or path - based address.
	Dirname *Dirname `protobuf:"bytes,600,opt,name=dirname,proto3,oneof"`
}

type Address_Filename struct {
	// Filename or filepath - based address.
	Filename *Filename `protobuf:"bytes,700,opt,name=filename,proto3,oneof"`
}

type Address_Url struct {
	// Url address.
	Url *URL `protobuf:"bytes,800,opt,name=url,proto3,oneof"`
}

type Address_Domain struct {
	// Domain address.
	Domain *Domain `protobuf:"bytes,900,opt,name=domain,proto3,oneof"`
}

type Address_MachineId struct {
	// MachineID address.
	MachineId *MachineID `protobuf:"bytes,1000,opt,name=machine_id,json=machineId,proto3,oneof"`
}

type Address_Email struct {
	// Email address.
	Email *Email `protobuf:"bytes,1100,opt,name=email,proto3,oneof"`
}

type Address_Custom struct {
	// Custom string address.
	Custom string `protobuf:"bytes,1200,opt,name=custom,proto3,oneof"`
}

func (*Address_S3) isAddress_Address() {}

func (*Address_Kafka) isAddress_Address() {}

func (*Address_Digest) isAddress_Address() {}

func (*Address_Uuid) isAddress_Address() {}

func (*Address_UserId) isAddress_Address() {}

func (*Address_Dirname) isAddress_Address() {}

func (*Address_Filename) isAddress_Address() {}

func (*Address_Url) isAddress_Address() {}

func (*Address_Domain) isAddress_Address() {}

func (*Address_MachineId) isAddress_Address() {}

func (*Address_Email) isAddress_Address() {}

func (*Address_Custom) isAddress_Address() {}

var File_api_common_address_proto protoreflect.FileDescriptor

var file_api_common_address_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73,
	0x33, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x75, 0x72, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x75, 0x75, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x05, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48,
	0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x33,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x31, 0x0a,
	0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x12, 0x2d, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x69, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x52, 0x4c, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0xb0, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x6c, 0x79, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_common_address_proto_rawDescOnce sync.Once
	file_api_common_address_proto_rawDescData = file_api_common_address_proto_rawDesc
)

func file_api_common_address_proto_rawDescGZIP() []byte {
	file_api_common_address_proto_rawDescOnce.Do(func() {
		file_api_common_address_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_address_proto_rawDescData)
	})
	return file_api_common_address_proto_rawDescData
}

var file_api_common_address_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_common_address_proto_goTypes = []interface{}{
	(*Address)(nil),      // 0: api.common.Address
	(*Domain)(nil),       // 1: api.common.Domain
	(*S3Address)(nil),    // 2: api.common.S3Address
	(*KafkaAddress)(nil), // 3: api.common.KafkaAddress
	(*Digest)(nil),       // 4: api.common.Digest
	(*UUID)(nil),         // 5: api.common.UUID
	(*UserID)(nil),       // 6: api.common.UserID
	(*Dirname)(nil),      // 7: api.common.Dirname
	(*Filename)(nil),     // 8: api.common.Filename
	(*URL)(nil),          // 9: api.common.URL
	(*MachineID)(nil),    // 10: api.common.MachineID
	(*Email)(nil),        // 11: api.common.Email
}
var file_api_common_address_proto_depIdxs = []int32{
	1,  // 0: api.common.Address.explicit_domain:type_name -> api.common.Domain
	2,  // 1: api.common.Address.s3:type_name -> api.common.S3Address
	3,  // 2: api.common.Address.kafka:type_name -> api.common.KafkaAddress
	4,  // 3: api.common.Address.digest:type_name -> api.common.Digest
	5,  // 4: api.common.Address.uuid:type_name -> api.common.UUID
	6,  // 5: api.common.Address.user_id:type_name -> api.common.UserID
	7,  // 6: api.common.Address.dirname:type_name -> api.common.Dirname
	8,  // 7: api.common.Address.filename:type_name -> api.common.Filename
	9,  // 8: api.common.Address.url:type_name -> api.common.URL
	1,  // 9: api.common.Address.domain:type_name -> api.common.Domain
	10, // 10: api.common.Address.machine_id:type_name -> api.common.MachineID
	11, // 11: api.common.Address.email:type_name -> api.common.Email
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_common_address_proto_init() }
func file_api_common_address_proto_init() {
	if File_api_common_address_proto != nil {
		return
	}
	file_api_common_digest_proto_init()
	file_api_common_dirname_proto_init()
	file_api_common_domain_proto_init()
	file_api_common_email_proto_init()
	file_api_common_filename_proto_init()
	file_api_common_kafka_address_proto_init()
	file_api_common_machine_id_proto_init()
	file_api_common_s3_address_proto_init()
	file_api_common_url_proto_init()
	file_api_common_user_id_proto_init()
	file_api_common_uuid_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_address_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_address_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Address_S3)(nil),
		(*Address_Kafka)(nil),
		(*Address_Digest)(nil),
		(*Address_Uuid)(nil),
		(*Address_UserId)(nil),
		(*Address_Dirname)(nil),
		(*Address_Filename)(nil),
		(*Address_Url)(nil),
		(*Address_Domain)(nil),
		(*Address_MachineId)(nil),
		(*Address_Email)(nil),
		(*Address_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_address_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_address_proto_goTypes,
		DependencyIndexes: file_api_common_address_proto_depIdxs,
		MessageInfos:      file_api_common_address_proto_msgTypes,
	}.Build()
	File_api_common_address_proto = out.File
	file_api_common_address_proto_rawDesc = nil
	file_api_common_address_proto_goTypes = nil
	file_api_common_address_proto_depIdxs = nil
}
