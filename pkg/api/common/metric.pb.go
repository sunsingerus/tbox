// Copyright The TBox Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// Metrics come from client to server in order to track client's activities.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/common/metric.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MetricType represents all metric types in the system.
type MetricType int32

const (
	// Due to first enum value has to be zero in proto3
	MetricType_METRIC_TYPE_RESERVED MetricType = 0
	// Unspecified means we do not know its type
	MetricType_METRIC_TYPE_UNSPECIFIED MetricType = 100
	// CPU usage metric
	MetricType_METRIC_TYPE_CPU MetricType = 200
	// RAM usage metric
	MetricType_METRIC_TYPE_RAM MetricType = 300
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0:   "METRIC_TYPE_RESERVED",
		100: "METRIC_TYPE_UNSPECIFIED",
		200: "METRIC_TYPE_CPU",
		300: "METRIC_TYPE_RAM",
	}
	MetricType_value = map[string]int32{
		"METRIC_TYPE_RESERVED":    0,
		"METRIC_TYPE_UNSPECIFIED": 100,
		"METRIC_TYPE_CPU":         200,
		"METRIC_TYPE_RAM":         300,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_common_metric_proto_enumTypes[0].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_api_common_metric_proto_enumTypes[0]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_api_common_metric_proto_rawDescGZIP(), []int{0}
}

// Metric is one metric tuple
// (metric identifier [optional], timestamp [optional], description [optional], metric value)
// Metric can be classified either by type or by name.
// Identifier can be omitted, in case either both sides understand what they are talking about or
// identifier is provided in parent's (outer) data type, such as Metric
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Type of the metric
	Type *MetricType `protobuf:"varint,100,opt,name=type,proto3,enum=api.common.MetricType,oneof" json:"type,omitempty"`
	// Optional. Name of the metric
	Name *string `protobuf:"bytes,200,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Optional. Timestamp.
	Ts *timestamppb.Timestamp `protobuf:"bytes,300,opt,name=ts,proto3,oneof" json:"ts,omitempty"`
	// Optional. Description represents human-readable description on what it is.
	Description *string `protobuf:"bytes,400,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Value is the purpose of the whole Metric data type,
	// is expected to be present all the time, and can be of any type
	//
	// Types that are assignable to Value:
	//	*Metric_StringValue
	//	*Metric_DoubleValue
	//	*Metric_Int32Value
	//	*Metric_Uint32Value
	//	*Metric_Int64Value
	//	*Metric_Uint64Value
	//	*Metric_BytesValue
	Value isMetric_Value `protobuf_oneof:"Value"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_api_common_metric_proto_rawDescGZIP(), []int{0}
}

func (x *Metric) GetType() MetricType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MetricType_METRIC_TYPE_RESERVED
}

func (x *Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Metric) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Metric) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metric) GetStringValue() string {
	if x, ok := x.GetValue().(*Metric_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Metric) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Metric_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Metric) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*Metric_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Metric) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*Metric_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *Metric) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Metric_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Metric) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*Metric_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Metric) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Metric_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_StringValue struct {
	// OneOf. string value of the metric
	StringValue string `protobuf:"bytes,500,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Metric_DoubleValue struct {
	// OneOf. double value of the metric
	DoubleValue float64 `protobuf:"fixed64,510,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Metric_Int32Value struct {
	// OneOf. int32 value of the metric
	Int32Value int32 `protobuf:"varint,520,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Metric_Uint32Value struct {
	// OneOf. uint32 value of the metric
	Uint32Value uint32 `protobuf:"varint,530,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Metric_Int64Value struct {
	// OneOf. int64 value of the metric
	Int64Value int64 `protobuf:"varint,540,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Metric_Uint64Value struct {
	// OneOf. uint64 value of the metric
	Uint64Value uint64 `protobuf:"varint,550,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Metric_BytesValue struct {
	// OneOf. bytes value of the metric
	BytesValue []byte `protobuf:"bytes,560,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*Metric_StringValue) isMetric_Value() {}

func (*Metric_DoubleValue) isMetric_Value() {}

func (*Metric_Int32Value) isMetric_Value() {}

func (*Metric_Uint32Value) isMetric_Value() {}

func (*Metric_Int64Value) isMetric_Value() {}

func (*Metric_Uint64Value) isMetric_Value() {}

func (*Metric_BytesValue) isMetric_Value() {}

var File_api_common_metric_proto protoreflect.FileDescriptor

var file_api_common_metric_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x03, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x02, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xfe, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x9c, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x24, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x6f, 0x0a, 0x0a,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x64, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x50, 0x55, 0x10, 0xc8, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x45, 0x54, 0x52, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4d, 0x10, 0xac, 0x02, 0x42, 0x2c, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x6c, 0x79, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_common_metric_proto_rawDescOnce sync.Once
	file_api_common_metric_proto_rawDescData = file_api_common_metric_proto_rawDesc
)

func file_api_common_metric_proto_rawDescGZIP() []byte {
	file_api_common_metric_proto_rawDescOnce.Do(func() {
		file_api_common_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_metric_proto_rawDescData)
	})
	return file_api_common_metric_proto_rawDescData
}

var file_api_common_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_common_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_common_metric_proto_goTypes = []interface{}{
	(MetricType)(0),               // 0: api.common.MetricType
	(*Metric)(nil),                // 1: api.common.Metric
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_api_common_metric_proto_depIdxs = []int32{
	0, // 0: api.common.Metric.type:type_name -> api.common.MetricType
	2, // 1: api.common.Metric.ts:type_name -> google.protobuf.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_common_metric_proto_init() }
func file_api_common_metric_proto_init() {
	if File_api_common_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_common_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_metric_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Metric_StringValue)(nil),
		(*Metric_DoubleValue)(nil),
		(*Metric_Int32Value)(nil),
		(*Metric_Uint32Value)(nil),
		(*Metric_Int64Value)(nil),
		(*Metric_Uint64Value)(nil),
		(*Metric_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_metric_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_metric_proto_goTypes,
		DependencyIndexes: file_api_common_metric_proto_depIdxs,
		EnumInfos:         file_api_common_metric_proto_enumTypes,
		MessageInfos:      file_api_common_metric_proto_msgTypes,
	}.Build()
	File_api_common_metric_proto = out.File
	file_api_common_metric_proto_rawDesc = nil
	file_api_common_metric_proto_goTypes = nil
	file_api_common_metric_proto_depIdxs = nil
}
