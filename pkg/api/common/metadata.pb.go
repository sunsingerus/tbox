// Copyright The TBox Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// Metadata defines all possible metadata for objects.
// For example, for stream of dataChunks, is used to represent:
//   - chunk header,
//   - data descriptions,
//   - data encoding descriptions,
//   - etc.
// Can also be used as metadata description for any other objects.
// Since protobuf has ability not to send 'optional' fields, metadata can have full set of fields, describing
// all possible metadata options and have only few of them which are really used sent to the correspondent.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/common/metadata.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metadata describes metadata of the object
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the object. [Optional]
	// Object has to have either type or name, one of them is expected to be in place.
	// Object can be typed/identified either by type or by name.
	Type *int32 `protobuf:"varint,100,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Name of the object. [Optional]
	// Object has to have either type or name, one of the is expected to be presented.
	// Object can be typed/identified either by type or by name.
	Name *string `protobuf:"bytes,200,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Version of the object. [Optional]
	Version *int32 `protobuf:"varint,300,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description represents string with human-readable description of the object. [Optional]
	Description *string `protobuf:"bytes,400,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Status represents status code of the object. [Optional]
	Status *int32 `protobuf:"varint,500,opt,name=status,proto3,oneof" json:"status,omitempty"`
	// Mode represents mode code of the object. [Optional]
	Mode *int32 `protobuf:"varint,600,opt,name=mode,proto3,oneof" json:"mode,omitempty"`
	// Ts is the timestamp of the object. [Optional]
	Ts *timestamppb.Timestamp `protobuf:"bytes,700,opt,name=ts,proto3,oneof" json:"ts,omitempty"`
	// Addresses represents map of addresses of the object. [Optional]
	// Internal and external or whatever may be needed.
	Addresses *AddressMap `protobuf:"bytes,800,opt,name=addresses,proto3,oneof" json:"addresses,omitempty"`
	// Properties represents properties of the data chunk, such as len, offset, etc... . [Optional]
	Properties *DataChunkProperties `protobuf:"bytes,900,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
	// Multiple associated components
	Types    *SliceInt32 `protobuf:"bytes,1000,opt,name=types,proto3,oneof" json:"types,omitempty"`
	Versions *SliceInt32 `protobuf:"bytes,1100,opt,name=versions,proto3,oneof" json:"versions,omitempty"`
	Statuses *SliceInt32 `protobuf:"bytes,1200,opt,name=statuses,proto3,oneof" json:"statuses,omitempty"`
	Modes    *SliceInt32 `protobuf:"bytes,1300,opt,name=modes,proto3,oneof" json:"modes,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_common_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_common_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_common_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *Metadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Metadata) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Metadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Metadata) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Metadata) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *Metadata) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *Metadata) GetAddresses() *AddressMap {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Metadata) GetProperties() *DataChunkProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Metadata) GetTypes() *SliceInt32 {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Metadata) GetVersions() *SliceInt32 {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Metadata) GetStatuses() *SliceInt32 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Metadata) GetModes() *SliceInt32 {
	if x != nil {
		return x.Modes
	}
	return nil
}

var File_api_common_metadata_proto protoreflect.FileDescriptor

var file_api_common_metadata_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x05, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0xf4,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x02,
	0x74, 0x73, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x02, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0xa0, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x48, 0x07, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x48, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x48, 0x0a, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0xb0, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x94, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x48, 0x0c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x6c, 0x79, 0x2d, 0x69, 0x6f, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_common_metadata_proto_rawDescOnce sync.Once
	file_api_common_metadata_proto_rawDescData = file_api_common_metadata_proto_rawDesc
)

func file_api_common_metadata_proto_rawDescGZIP() []byte {
	file_api_common_metadata_proto_rawDescOnce.Do(func() {
		file_api_common_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_common_metadata_proto_rawDescData)
	})
	return file_api_common_metadata_proto_rawDescData
}

var file_api_common_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_common_metadata_proto_goTypes = []interface{}{
	(*Metadata)(nil),              // 0: api.common.Metadata
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*AddressMap)(nil),            // 2: api.common.AddressMap
	(*DataChunkProperties)(nil),   // 3: api.common.DataChunkProperties
	(*SliceInt32)(nil),            // 4: api.common.SliceInt32
}
var file_api_common_metadata_proto_depIdxs = []int32{
	1, // 0: api.common.Metadata.ts:type_name -> google.protobuf.Timestamp
	2, // 1: api.common.Metadata.addresses:type_name -> api.common.AddressMap
	3, // 2: api.common.Metadata.properties:type_name -> api.common.DataChunkProperties
	4, // 3: api.common.Metadata.types:type_name -> api.common.SliceInt32
	4, // 4: api.common.Metadata.versions:type_name -> api.common.SliceInt32
	4, // 5: api.common.Metadata.statuses:type_name -> api.common.SliceInt32
	4, // 6: api.common.Metadata.modes:type_name -> api.common.SliceInt32
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_api_common_metadata_proto_init() }
func file_api_common_metadata_proto_init() {
	if File_api_common_metadata_proto != nil {
		return
	}
	file_api_common_address_map_proto_init()
	file_api_common_data_chunk_properties_proto_init()
	file_api_common_slice_int32_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_common_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_common_metadata_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_common_metadata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_common_metadata_proto_goTypes,
		DependencyIndexes: file_api_common_metadata_proto_depIdxs,
		MessageInfos:      file_api_common_metadata_proto_msgTypes,
	}.Build()
	File_api_common_metadata_proto = out.File
	file_api_common_metadata_proto_rawDesc = nil
	file_api_common_metadata_proto_goTypes = nil
	file_api_common_metadata_proto_depIdxs = nil
}
