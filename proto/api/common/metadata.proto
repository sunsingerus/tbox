// Copyright The TBox Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Metadata defines all possible metadata for objects.
 * For example, for stream of dataChunks, is used to represent:
 *   - chunk header,
 *   - data descriptions,
 *   - data encoding descriptions,
 *   - etc.
 * Can also be used as metadata description for any other objects.
 * Since protobuf has ability not to send 'optional' fields, metadata can have full set of fields, describing
 * all possible metadata options and have only few of them which are really used sent to the correspondent.
 */
syntax = "proto3";

package api.common;
option go_package = "github.com/sunsingerus/tbox/pkg/api/common";

import "google/protobuf/timestamp.proto";
import "api/common/address_map.proto";
import "api/common/data_chunk_properties.proto";
import "api/common/slice_int32.proto";

// Metadata describes metadata of the object
message Metadata {
    // Type of the object. [Optional]
    // Object has to have either type or name, one of them is expected to be in place.
    // Object can be typed/identified either by type or by name.
    optional int32 type = 100;

    // Name of the object. [Optional]
    // Object has to have either type or name, one of the is expected to be presented.
    // Object can be typed/identified either by type or by name.
    optional string name = 200;

    // Version of the object. [Optional]
    optional int32 version = 300;

    // Description represents string with human-readable description of the object. [Optional]
    optional string description = 400;

    // Status represents status code of the object. [Optional]
    optional int32 status = 500;

    // Mode represents mode code of the object. [Optional]
    optional int32 mode = 600;

    // Ts is the timestamp of the object. [Optional]
    optional google.protobuf.Timestamp ts = 700;

    // Addresses represents map of addresses of the object. [Optional]
    // Internal and external or whatever may be needed.
    optional AddressMap addresses = 800;

    // Properties represents properties of the data chunk, such as len, offset, etc... . [Optional]
    optional DataChunkProperties properties = 900;

    // Multiple associated components
    optional SliceInt32 types = 1000;
    optional SliceInt32 versions = 1100;
    optional SliceInt32 statuses = 1200;
    optional SliceInt32 modes = 1300;
}
